{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\ahmed\\\\OneDrive\\\\Bureau\\\\Level-UP-ouh\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\ahmed\\\\OneDrive\\\\Bureau\\\\Level-UP-ouh\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { FormControl, Validators, FormGroup } from '@angular/forms';\nimport { FormBuilder } from '@angular/forms';\nimport { PasswordValidation } from './password-validator.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/material/form-field\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/input\";\nimport * as i5 from \"./field-error-display/field-error-display.component\";\nimport * as i6 from \"@angular/material/button\";\n\nfunction ValidationFormsComponent_mat_error_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Please enter a valid email address \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ValidationFormsComponent_mat_error_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Email is \");\n    i0.ɵɵelementStart(2, \"strong\");\n    i0.ɵɵtext(3, \"required\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nvar _c0 = function _c0(a0) {\n  return {\n    \"has-success\": a0\n  };\n};\n\nexport var MyErrorStateMatcher = /*#__PURE__*/function () {\n  function MyErrorStateMatcher() {\n    _classCallCheck(this, MyErrorStateMatcher);\n  }\n\n  _createClass(MyErrorStateMatcher, [{\n    key: \"isErrorState\",\n    value: function isErrorState(control, form) {\n      var isSubmitted = form && form.submitted;\n      return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n    }\n  }]);\n\n  return MyErrorStateMatcher;\n}();\nexport var ValidationFormsComponent = /*#__PURE__*/(function () {\n  var ValidationFormsComponent = /*#__PURE__*/function () {\n    function ValidationFormsComponent(formBuilder) {\n      _classCallCheck(this, ValidationFormsComponent);\n\n      this.formBuilder = formBuilder;\n      this.emailFormControl = new FormControl('', [Validators.required, Validators.email]);\n      this.validEmailRegister = false;\n      this.validConfirmPasswordRegister = false;\n      this.validPasswordRegister = false;\n      this.validEmailLogin = false;\n      this.validPasswordLogin = false;\n      this.validTextType = false;\n      this.validEmailType = false;\n      this.validNumberType = false;\n      this.validUrlType = false;\n      this.pattern = \"https?://.+\";\n      this.validSourceType = false;\n      this.validDestinationType = false;\n      this.matcher = new MyErrorStateMatcher();\n    }\n\n    _createClass(ValidationFormsComponent, [{\n      key: \"isFieldValid\",\n      value: function isFieldValid(form, field) {\n        return !form.get(field).valid && form.get(field).touched;\n      }\n    }, {\n      key: \"displayFieldCss\",\n      value: function displayFieldCss(form, field) {\n        return {\n          'has-error': this.isFieldValid(form, field),\n          'has-feedback': this.isFieldValid(form, field)\n        };\n      }\n    }, {\n      key: \"onRegister\",\n      value: function onRegister() {\n        if (this.register.valid) {} else {\n          this.validateAllFormFields(this.register);\n        }\n      }\n    }, {\n      key: \"onLogin\",\n      value: function onLogin() {\n        if (this.login.valid) {} else {\n          this.validateAllFormFields(this.login);\n        }\n      }\n    }, {\n      key: \"onType\",\n      value: function onType() {\n        if (this.type.valid) {} else {\n          this.validateAllFormFields(this.type);\n        }\n      }\n    }, {\n      key: \"validateAllFormFields\",\n      value: function validateAllFormFields(formGroup) {\n        var _this = this;\n\n        Object.keys(formGroup.controls).forEach(function (field) {\n          var control = formGroup.get(field);\n\n          if (control instanceof FormControl) {\n            control.markAsTouched({\n              onlySelf: true\n            });\n          } else if (control instanceof FormGroup) {\n            _this.validateAllFormFields(control);\n          }\n        });\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.register = this.formBuilder.group({\n          // To add a validator, we must first convert the string value into an array. The first item in the array is the default value if any, then the next item in the array is the validator. Here we are adding a required validator meaning that the firstName attribute must have a value in it.\n          email: [null, [Validators.required, Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\")]],\n          // We can use more than one validator per field. If we want to use more than one validator we have to wrap our array of validators with a Validators.compose function. Here we are using a required, minimum length and maximum length validator.\n          optionsCheckboxes: ['', Validators.required],\n          password: ['', Validators.compose([Validators.required, Validators.minLength(6)])],\n          confirmPassword: ['', Validators.required]\n        }, {\n          validator: PasswordValidation.MatchPassword // your validation method\n\n        });\n        this.login = this.formBuilder.group({\n          // To add a validator, we must first convert the string value into an array. The first item in the array is the default value if any, then the next item in the array is the validator. Here we are adding a required validator meaning that the firstName attribute must have a value in it.\n          email: [null, [Validators.required, Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\")]],\n          // We can use more than one validator per field. If we want to use more than one validator we have to wrap our array of validators with a Validators.compose function. Here we are using a required, minimum length and maximum length validator.\n          password: ['', Validators.required]\n        });\n        this.type = this.formBuilder.group({\n          // To add a validator, we must first convert the string value into an array. The first item in the array is the default value if any, then the next item in the array is the validator. Here we are adding a required validator meaning that the firstName attribute must have a value in it.\n          text: [null, Validators.required],\n          email: [null, [Validators.required, Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\")]],\n          number: [null, Validators.required],\n          url: [null, Validators.required],\n          // We can use more than one validator per field. If we want to use more than one validator we have to wrap our array of validators with a Validators.compose function. Here we are using a required, minimum length and maximum length validator.\n          password: ['', Validators.required],\n          confirmPassword: ['', Validators.required]\n        }, {\n          validator: PasswordValidation.MatchPassword // your validation method\n\n        });\n      }\n    }, {\n      key: \"emailValidationRegister\",\n      value: function emailValidationRegister(e) {\n        var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n        if (re.test(String(e).toLowerCase())) {\n          this.validEmailRegister = true;\n        } else {\n          this.validEmailRegister = false;\n        }\n      }\n    }, {\n      key: \"passwordValidationRegister\",\n      value: function passwordValidationRegister(e) {\n        if (e.length > 5) {\n          this.validPasswordRegister = true;\n        } else {\n          this.validPasswordRegister = false;\n        }\n      }\n    }, {\n      key: \"confirmPasswordValidationRegister\",\n      value: function confirmPasswordValidationRegister(e) {\n        if (this.register.controls['password'].value === e) {\n          this.validConfirmPasswordRegister = true;\n        } else {\n          this.validConfirmPasswordRegister = false;\n        }\n      }\n    }, {\n      key: \"emailValidationLogin\",\n      value: function emailValidationLogin(e) {\n        var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n        if (re.test(String(e).toLowerCase())) {\n          this.validEmailLogin = true;\n        } else {\n          this.validEmailLogin = false;\n        }\n      }\n    }, {\n      key: \"passwordValidationLogin\",\n      value: function passwordValidationLogin(e) {\n        if (e.length > 5) {\n          this.validPasswordLogin = true;\n        } else {\n          this.validPasswordLogin = false;\n        }\n      }\n    }, {\n      key: \"textValidationType\",\n      value: function textValidationType(e) {\n        if (e) {\n          this.validTextType = true;\n        } else {\n          this.validTextType = false;\n        }\n      }\n    }, {\n      key: \"emailValidationType\",\n      value: function emailValidationType(e) {\n        var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n        if (re.test(String(e).toLowerCase())) {\n          this.validEmailType = true;\n        } else {\n          this.validEmailType = false;\n        }\n      }\n    }, {\n      key: \"numberValidationType\",\n      value: function numberValidationType(e) {\n        if (e) {\n          this.validNumberType = true;\n        } else {\n          this.validNumberType = false;\n        }\n      }\n    }, {\n      key: \"urlValidationType\",\n      value: function urlValidationType(e) {\n        try {\n          new URL(e);\n          this.validUrlType = true;\n        } catch (_) {\n          this.validUrlType = false;\n        }\n      }\n    }, {\n      key: \"sourceValidationType\",\n      value: function sourceValidationType(e) {\n        if (e) {\n          this.validSourceType = true;\n        } else {\n          this.validSourceType = false;\n        }\n      }\n    }, {\n      key: \"confirmDestinationValidationType\",\n      value: function confirmDestinationValidationType(e) {\n        if (this.type.controls['password'].value === e) {\n          this.validDestinationType = true;\n        } else {\n          this.validDestinationType = false;\n        }\n      }\n    }]);\n\n    return ValidationFormsComponent;\n  }();\n\n  ValidationFormsComponent.ɵfac = function ValidationFormsComponent_Factory(t) {\n    return new (t || ValidationFormsComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n  };\n\n  ValidationFormsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ValidationFormsComponent,\n    selectors: [[\"app-validationforms-cmp\"]],\n    decls: 45,\n    vars: 17,\n    consts: [[1, \"main-content\"], [1, \"container-fluid\"], [1, \"row\"], [1, \"col-md-12\"], [1, \"card\"], [1, \"form-horizontal\", 3, \"formGroup\"], [1, \"card-header\", \"card-header-rose\", \"card-header-text\"], [1, \"card-text\"], [1, \"card-title\"], [1, \"card-body\"], [1, \"col-sm-2\", \"col-form-label\"], [1, \"col-sm-7\"], [1, \"example-full-width\", \"has-label\", 3, \"ngClass\"], [\"type\", \"text\", \"matInput\", \"\", \"id\", \"text\", \"formControlName\", \"text\", 3, \"ngModelChange\"], [\"errorMsg\", \"Required text\", 3, \"displayError\"], [1, \"col-sm-3\", \"label-on-right\"], [1, \"example-full-width\", 3, \"ngClass\"], [\"type\", \"email\", \"matInput\", \"\", \"formControlName\", \"email\", 3, \"errorStateMatcher\", \"ngModelChange\"], [4, \"ngIf\"], [\"type\", \"number\", \"name\", \"number\", \"number\", \"true\", \"matInput\", \"\", \"formControlName\", \"number\", 3, \"ngModelChange\"], [\"errorMsg\", \"Add a number!\", 3, \"displayError\"], [1, \"card-footer\", \"text-center\"], [\"mat-raised-button\", \"\", \"type\", \"submit\", 1, \"btn\", \"btn-rose\", \"btn-fill\", 3, \"click\"]],\n    template: function ValidationFormsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"form\", 5)(6, \"div\", 6)(7, \"div\", 7)(8, \"h4\", 8);\n        i0.ɵɵtext(9, \"Type Validation\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(10, \"div\", 9)(11, \"div\", 2)(12, \"label\", 10);\n        i0.ɵɵtext(13, \"Required Text\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"div\", 11)(15, \"mat-form-field\", 12)(16, \"input\", 13);\n        i0.ɵɵlistener(\"ngModelChange\", function ValidationFormsComponent_Template_input_ngModelChange_16_listener($event) {\n          return ctx.textValidationType($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(17, \"app-field-error-display\", 14);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(18, \"label\", 15)(19, \"code\");\n        i0.ɵɵtext(20, \"required\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(21, \"div\", 2)(22, \"label\", 10);\n        i0.ɵɵtext(23, \"Email\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"div\", 11)(25, \"mat-form-field\", 16)(26, \"input\", 17);\n        i0.ɵɵlistener(\"ngModelChange\", function ValidationFormsComponent_Template_input_ngModelChange_26_listener($event) {\n          return ctx.emailValidationType($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(27, ValidationFormsComponent_mat_error_27_Template, 2, 0, \"mat-error\", 18);\n        i0.ɵɵtemplate(28, ValidationFormsComponent_mat_error_28_Template, 4, 0, \"mat-error\", 18);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(29, \"label\", 15)(30, \"code\");\n        i0.ɵɵtext(31, \"email=\\\"true\\\"\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(32, \"div\", 2)(33, \"label\", 10);\n        i0.ɵɵtext(34, \"Number\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(35, \"div\", 11)(36, \"mat-form-field\", 12)(37, \"input\", 19);\n        i0.ɵɵlistener(\"ngModelChange\", function ValidationFormsComponent_Template_input_ngModelChange_37_listener($event) {\n          return ctx.numberValidationType($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(38, \"app-field-error-display\", 20);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(39, \"label\", 15)(40, \"code\");\n        i0.ɵɵtext(41, \"number=\\\"true\\\"\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(42, \"div\", 21)(43, \"button\", 22);\n        i0.ɵɵlistener(\"click\", function ValidationFormsComponent_Template_button_click_43_listener() {\n          return ctx.onType();\n        });\n        i0.ɵɵtext(44, \"Validate Inputs\");\n        i0.ɵɵelementEnd()()()()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formGroup\", ctx.type);\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(11, _c0, ctx.validTextType === true))(\"ngClass\", ctx.displayFieldCss(ctx.type, \"text\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"displayError\", ctx.isFieldValid(ctx.type, \"text\"));\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(13, _c0, ctx.validEmailType === true));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"errorStateMatcher\", ctx.matcher);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.emailFormControl.hasError(\"email\") && !ctx.emailFormControl.hasError(\"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.emailFormControl.hasError(\"required\"));\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(15, _c0, ctx.validNumberType === true))(\"ngClass\", ctx.displayFieldCss(ctx.type, \"number\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"displayError\", ctx.isFieldValid(ctx.type, \"number\"));\n      }\n    },\n    directives: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i2.MatFormField, i3.NgClass, i4.MatInput, i1.DefaultValueAccessor, i1.NgControlStatus, i1.FormControlName, i5.FieldErrorDisplayComponent, i3.NgIf, i2.MatError, i1.NumberValueAccessor, i6.MatButton],\n    encapsulation: 2\n  });\n  return ValidationFormsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}